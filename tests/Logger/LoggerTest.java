package Logger;

import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

import static org.junit.jupiter.api.Assertions.*;

class LoggerTest {

    @Test
    void log() {
        String s = "T1";
        String s2 = "T2";
        Logger logger = new Logger(".\\data\\log.txt");
        logger.log(s);
        logger.log(s2);
        File file = new File(".\\data\\log.txt");
        try {
            Scanner scanner = new Scanner(file);
            String line = scanner.nextLine();
            assertEquals(s+s2, line);
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }

    }

    @Test
    void validateLog() {
        String regex = "((T1)((T2)(.*?)(T4)(.*?)|(T3)(.*?)(T5)(.*?))(T6))|((T7)(T8)(T9)(T10))";
        String replace = "$5$7$9$11";
        Logger logger = new Logger(".\\data\\log.txt");
        logger.log("T1T3T7T8T5T6T9T10T7T8T9T10T1T3T1T2T5T6T1T3T7T8T9T10T4T6T5T6T7T8T9T10T1T3T5T6T1T3T1T2T5T6T4T6T7T8T9T10T1T2T1T3T7T8T4T6T5T6T9T10T1T3T7T8T9T10T7T8T9T10T7T8T5T6T9T10T7T8T9T10T1T3T1T2T5T6T1T3T7T8T9T10T5T6T4T6T1T3T5T6T1T2T7T8T4T6T9T10T7T8T9T10T7T8T9T10T1T3T1T2T5T6T1T3T4T6T7T8T5T6T9T10T1T3T7T8T5T6T9T10T7T8T9T10T7T8T9T10T7T8T9T10T7T8T9T10T1T3T1T2T4T6T1T2T7T8T9T10T4T6T7T8T5T6T9T10T7T8T9T10T7T8T9T10T7T8T9T10T1T3T1T2T5T6T4T6T1T2T1T3T5T6T7T8T4T6T9T10T1T2T1T3T4T6T5T6T1T2T7T8T4T6T9T10T1T2T4T6T1T2T1T3T7T8T9T10T5T6T7T8T4T6T9T10T7T8T9T10T1T2T7T8T4T6T9T10T1T2T1T3T5T6T1T3T4T6T1T2T4T6T1T2T5T6T7T8T9T10T4T6T7T8T9T10T7T8T9T10T1T2T4T6T7T8T9T10T1T2T4T6T1T3T5T6T1T2T7T8T4T6T9T10T1T2T1T3T4T6T5T6T7T8T9T10T7T8T9T10T7T8T9T10T1T2T7T8T4T6T9T10T7T8T9T10T7T8T9T10T7T8T9T10T1T3T5T6T7T8T9T10T7T8T9T10T7T8T9T10T1T3T1T2T7T8T4T6T5T6T9T10T1T3T7T8T9T10T7T8T9T10T5T6T7T8T9T10T1T3T5T6T7T8T9T10T7T8T9T10T7T8T9T10T7T8T9T10T7T8T9T10T1T2T4T6T1T3T5T6T1T2T1T3T4T6T5T6T7T8T9T10T1T3T7T8T9T10T5T6T7T8T9T10T1T3T5T6T7T8T9T10T1T3T5T6T1T2T4T6T1T2T1T3T4T6T5T6T7T8T9T10T1T2T1T3T7T8T4T6T9T10T1T2T7T8T4T6T9T10T5T6T7T8T9T10T7T8T9T10T1T3T7T8T5T6T9T10T7T8T9T10T1T2T1T3T7T8T9T10T7T8T5T6T9T10T1T3T4T6T5T6T1T2T7T8T9T10T7T8T4T6T9T10T7T8T9T10T1T3T7T8T5T6T9T10T7T8T9T10T1T2T1T3T4T6T5T6T7T8T9T10T7T8T9T10T7T8T9T10T7T8T9T10T7T8T9T10T1T2T4T6T1T3T1T2T5T6T1T3T5T6T7T8T4T6T9T10T7T8T9T10T7T8T9T10T7T8T9T10T1T3T5T6T1T2T1T3T7T8T9T10T4T6T7T8T9T10T5T6T7T8T9T10T7T8T9T10T1T2T7T8T4T6T9T10T1T2T7T8T9T10T7T8T4T6T9T10T1T2T7T8T9T10T1T3T4T6T1T2T7T8T5T6T9T10T7T8T4T6T9T10T1T2T7T8T9T10T7T8T9T10T1T3T4T6T7T8T5T6T9T10T7T8T9T10T1T3T7T8T9T10T7T8T9T10T1T2T7T8T5T6T9T10T7T8T9T10T1T3T7T8T9T10T4T6T7T8T9T10T7T8T5T6T9T10T7T8T9T10T1T3T1T2T7T8T9T10T4T6T1T2T5T6T7T8T9T10T7T8T4T6T9T10T7T8T9T10T7T8T9T10T1T3T1T2T5T6T1T3T5T6T7T8T4T6T9T10T7T8T9T10T1T2T1T3T7T8T9T10T5T6T4T6T1T2T4T6T7T8T9T10T1T2T4T6T7T8T9T10T7T8T9T10T7T8T9T10T1T2T4T6T1T3T7T8T9T10T1T2T4T6T7T8T5T6T9T10T1T3T7T8T5T6T9T10T1T2T1T3T7T8T9T10T7T8T9T10T4T6T1T2T4T6T1T2T4T6T1T2T5T6T4T6T1T2T7T8T9T10T7T8T4T6T9T10T1T2T7T8T4T6T9T10T1T3T7T8T9T10T1T2T5T6T4T6T1T2T1T3T5T6T4T6T1T2T7T8T9T10T1T3T4T6T7T8T9T10T5T6T1T2T7T8T4T6T9T10T7T8T9T10T7T8T9T10T7T8T9T10T1T2T7T8T4T6T9T10T1T2T4T6");
        boolean isValid = logger.validateLog(regex,replace);
        assertTrue(isValid);


        // 1000 invariantes de RDP del TP2
        regex = "T0(?<T0>(?:T(?:\\d+))*?)(?:(?:T1(?<T1>(?:T(?:\\d+))*?)T3)|(?:T2(?<T2>(?:T(?:\\d+))*?)T4))(?<T3T4>(?:T(?:\\d+))*?)(?:(?:T5(?<T5>(?:T(?:\\d+))*?)T7)|(?:T6(?<T6>(?:T(?:\\d+))*?)T8))(?<T7T8>(?:T(?:\\d+))*?)(?:(?:T10(?<T10>(?:T(?:\\d+))*?)T12)|(?:T9(?<T9>(?:T(?:\\d+))*?)T11))(?<T11T12>(?:T(?:\\d+))*?)T13(?<T13>(?:T(?:\\d+))*?)T14(?<T14>(?:T(?:\\d+))*?)";
        replace = "${T0}${T1}${T2}${T3T4}${T5}${T6}${T7T8}${T9}${T10}${T11T12}${T13}${T14}";
        logger = new Logger(".\\data\\log.txt");
        logger.log
        isValid = logger.validateLog(regex,replace);
        assertTrue(isValid);

        // pongo transicion incorrecta en el log
        regex = "T0(?<T0>(?:T(?:\\d+))*?)(?:(?:T1(?<T1>(?:T(?:\\d+))*?)T3)|(?:T2(?<T2>(?:T(?:\\d+))*?)T4))(?<T3T4>(?:T(?:\\d+))*?)(?:(?:T5(?<T5>(?:T(?:\\d+))*?)T7)|(?:T6(?<T6>(?:T(?:\\d+))*?)T8))(?<T7T8>(?:T(?:\\d+))*?)(?:(?:T10(?<T10>(?:T(?:\\d+))*?)T12)|(?:T9(?<T9>(?:T(?:\\d+))*?)T11))(?<T11T12>(?:T(?:\\d+))*?)T13(?<T13>(?:T(?:\\d+))*?)T14(?<T14>(?:T(?:\\d+))*?)";
        replace = "${T0}${T1}${T2}${T3T4}${T5}${T6}${T7T8}${T9}${T10}${T11T12}${T13}${T14}";
        logger = new Logger(".\\data\\log.txt");
        logger.log
        isValid = logger.validateLog(regex,replace);
        assertFalse(isValid);
    }
}